#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <vector>

#include <sys/time.h>
#include <FreeImage.h>
#include "hipacc.hpp"

// variables set by Makefile
//#define SIZE_X 5
//#define SIZE_Y 5
//#define WIDTH 4096
//#define HEIGHT 4096
#define PACK_INT

using namespace hipacc;


#ifdef PACK_INT
# define data_t uint
# define pack(x, y, z, w) \
    (uint)((uint)(x) << 24 | (uint)(y) << 16 | (uint)(z) << 8 | (uint)(w))
# define unpack(r, g, b, val) \
    val >>= 8; \
    b = val & 0xff; \
    val >>= 8; \
    g = val & 0xff; \
    val >>= 8; \
    r = val & 0xff
#else
# define data_t uchar4
# define pack(x, y, z, w) \
    ((uchar4){x, y, z, w})
# define unpack(r, g, b, val) \
    r = val.s0; \
    g = val.s1; \
    b = val.s2
#endif

class Bokeh : public Kernel<data_t> {
    private:
        Accessor<data_t> &input;
        Domain &dom;
        Mask<float> &mask;
        float threshold;
        float amp;

    public:
        Bokeh(IterationSpace<data_t> &iter, Accessor<data_t> &input,
              Domain &dom, Mask<float> &mask, float threshold, float amp) :
            Kernel(iter),
            input(input),
            dom(dom),
            mask(mask),
            threshold(threshold),
            amp(amp)
        { add_accessor(&input); }

        void kernel() {
            float sum_weight = 0.0f;
            float sum_r = 0.0f;
            float sum_g = 0.0f;
            float sum_b = 0.0f;
            
            iterate(dom, [&] () {
                data_t pixel = input(dom);
                float rpixel, gpixel, bpixel;
                unpack(rpixel, gpixel, bpixel, pixel);
                rpixel /= 255.0f;
                gpixel /= 255.0f;
                bpixel /= 255.0f;
                float luma = 0.2126f * rpixel +  0.7152f * gpixel + 0.0722f * bpixel;
                float weight = mask(dom);
                if (luma > threshold) weight *= amp; // amplify light pixels
                sum_r += rpixel * weight;
                sum_g += gpixel * weight;
                sum_b += bpixel * weight;
                sum_weight += weight;
            });

            float rout = sum_r * 255.f / sum_weight;
            float gout = sum_g * 255.f / sum_weight;
            float bout = sum_b * 255.f / sum_weight;
            output() = pack(rout, gout, bout, 255);
        }
};

/*************************************************************************
 * Main function                                                         *
 *************************************************************************/
int main(int argc, const char **argv) {
    float threshold = 0.9f;
    float amp = 150.0f;

    if (argc > 2) {
      threshold = atof(argv[1]);
      amp = atof(argv[2]);
    }

    // define filters
    const float mask[31][31] = {
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 1.000f, 2.000f, 4.000f, 6.000f, 11.000f, 17.000f, 19.000f, 13.000f, 9.000f, 7.000f, 3.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 1.000f, 1.000f, 2.000f, 2.000f, 4.000f, 10.000f, 27.000f, 48.000f, 72.000f, 89.000f, 89.000f, 63.000f, 26.000f, 3.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 2.000f, 4.000f, 6.000f, 14.000f, 19.000f, 37.000f, 64.000f, 100.000f, 133.000f, 171.000f, 198.000f, 200.000f, 159.000f, 92.000f, 30.000f, 1.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 2.000f, 8.000f, 9.000f, 11.000f, 27.000f, 55.000f, 91.000f, 131.000f, 170.000f, 204.000f, 230.000f, 243.000f, 249.000f, 248.000f, 236.000f, 188.000f, 107.000f, 34.000f, 1.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 2.000f, 8.000f, 12.000f, 29.000f, 59.000f, 102.000f, 146.000f, 183.000f, 217.000f, 241.000f, 251.000f, 254.000f, 254.000f, 254.000f, 253.000f, 254.000f, 244.000f, 197.000f, 119.000f, 44.000f, 3.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 3.000f, 13.000f, 22.000f, 47.000f, 91.000f, 146.000f, 199.000f, 234.000f, 248.000f, 252.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 252.000f, 250.000f, 210.000f, 127.000f, 45.000f, 4.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 1.000f, 3.000f, 13.000f, 32.000f, 74.000f, 133.000f, 192.000f, 229.000f, 246.000f, 251.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 252.000f, 213.000f, 126.000f, 44.000f, 4.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 3.000f, 8.000f, 32.000f, 88.000f, 156.000f, 216.000f, 248.000f, 254.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 255.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 252.000f, 205.000f, 116.000f, 32.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 7.000f, 16.000f, 68.000f, 164.000f, 232.000f, 250.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 250.000f, 248.000f, 193.000f, 94.000f, 23.000f, 2.000f, 0.000f, 0.000f, 0.000f, },
{ 9.000f, 32.000f, 104.000f, 208.000f, 253.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 254.000f, 240.000f, 170.000f, 73.000f, 11.000f, 4.000f, 1.000f, 0.000f, },
{ 10.000f, 43.000f, 123.000f, 218.000f, 252.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 251.000f, 229.000f, 140.000f, 51.000f, 11.000f, 2.000f, 1.000f, },
{ 10.000f, 45.000f, 125.000f, 218.000f, 252.000f, 254.000f, 254.000f, 254.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 251.000f, 204.000f, 116.000f, 32.000f, 3.000f, 2.000f, },
{ 10.000f, 46.000f, 126.000f, 218.000f, 252.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 243.000f, 179.000f, 74.000f, 14.000f, 4.000f, },
{ 10.000f, 46.000f, 127.000f, 220.000f, 252.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 220.000f, 118.000f, 34.000f, 2.000f, },
{ 9.000f, 42.000f, 121.000f, 216.000f, 252.000f, 253.000f, 254.000f, 252.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 232.000f, 135.000f, 40.000f, 1.000f, },
{ 8.000f, 37.000f, 113.000f, 213.000f, 252.000f, 254.000f, 254.000f, 253.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 221.000f, 117.000f, 29.000f, 2.000f, },
{ 7.000f, 31.000f, 104.000f, 210.000f, 252.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 247.000f, 188.000f, 78.000f, 13.000f, 2.000f, },
{ 6.000f, 26.000f, 93.000f, 200.000f, 250.000f, 254.000f, 254.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 251.000f, 222.000f, 141.000f, 43.000f, 5.000f, 2.000f, },
{ 6.000f, 20.000f, 80.000f, 182.000f, 244.000f, 253.000f, 254.000f, 254.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 252.000f, 247.000f, 185.000f, 93.000f, 22.000f, 2.000f, 1.000f, },
{ 3.000f, 11.000f, 62.000f, 160.000f, 231.000f, 249.000f, 253.000f, 254.000f, 253.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 251.000f, 230.000f, 140.000f, 52.000f, 12.000f, 3.000f, 1.000f, },
{ 1.000f, 6.000f, 44.000f, 137.000f, 215.000f, 247.000f, 252.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 245.000f, 193.000f, 95.000f, 21.000f, 7.000f, 2.000f, 0.000f, },
{ 1.000f, 3.000f, 30.000f, 115.000f, 204.000f, 250.000f, 250.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 226.000f, 136.000f, 51.000f, 10.000f, 3.000f, 0.000f, 0.000f, },
{ 1.000f, 2.000f, 18.000f, 87.000f, 183.000f, 250.000f, 253.000f, 252.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 251.000f, 244.000f, 179.000f, 75.000f, 17.000f, 5.000f, 0.000f, 0.000f, 0.000f, },
{ 1.000f, 1.000f, 12.000f, 54.000f, 144.000f, 233.000f, 255.000f, 253.000f, 252.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 253.000f, 251.000f, 251.000f, 201.000f, 111.000f, 28.000f, 3.000f, 2.000f, 0.000f, 0.000f, 0.000f, },
{ 1.000f, 2.000f, 8.000f, 26.000f, 85.000f, 167.000f, 220.000f, 240.000f, 244.000f, 249.000f, 251.000f, 252.000f, 252.000f, 253.000f, 253.000f, 254.000f, 254.000f, 254.000f, 254.000f, 254.000f, 250.000f, 252.000f, 225.000f, 136.000f, 52.000f, 12.000f, 2.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 1.000f, 4.000f, 9.000f, 28.000f, 74.000f, 129.000f, 173.000f, 202.000f, 224.000f, 237.000f, 246.000f, 248.000f, 249.000f, 249.000f, 250.000f, 252.000f, 252.000f, 253.000f, 251.000f, 253.000f, 230.000f, 162.000f, 72.000f, 18.000f, 6.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 1.000f, 3.000f, 8.000f, 22.000f, 49.000f, 79.000f, 109.000f, 137.000f, 161.000f, 184.000f, 202.000f, 215.000f, 226.000f, 233.000f, 239.000f, 240.000f, 244.000f, 244.000f, 230.000f, 173.000f, 89.000f, 31.000f, 9.000f, 2.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 2.000f, 7.000f, 10.000f, 17.000f, 33.000f, 53.000f, 72.000f, 94.000f, 116.000f, 136.000f, 152.000f, 164.000f, 173.000f, 178.000f, 186.000f, 182.000f, 153.000f, 96.000f, 39.000f, 14.000f, 5.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 1.000f, 3.000f, 4.000f, 8.000f, 13.000f, 19.000f, 25.000f, 33.000f, 44.000f, 54.000f, 60.000f, 66.000f, 72.000f, 75.000f, 69.000f, 48.000f, 29.000f, 16.000f, 7.000f, 1.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 1.000f, 2.000f, 2.000f, 4.000f, 5.000f, 8.000f, 10.000f, 12.000f, 13.000f, 14.000f, 14.000f, 11.000f, 6.000f, 5.000f, 5.000f, 2.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
{ 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 1.000f, 2.000f, 5.000f, 6.000f, 6.000f, 6.000f, 5.000f, 4.000f, 3.000f, 3.000f, 3.000f, 2.000f, 1.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, 0.000f, },
    };

    // load input
    FIBITMAP* img = FreeImage_Load(FIF_JPEG, "tests/postproc/bokeh/ny.jpg");
    img = FreeImage_ConvertTo32Bits(img);
    const int width = 1920;//FreeImage_GetWidth(img);
    const int height = 1200;//FreeImage_GetHeight(img);
    data_t* d;
    
    data_t* input = new data_t[width*height]; 
    for(size_t y = 0; y < height; ++y) {
        for(size_t x = 0; x < width; ++x) {
            RGBQUAD color; 
            FreeImage_GetPixelColor(img, x, y, &color);
            input[x+y*width] = pack(color.rgbRed, color.rgbGreen, color.rgbBlue, 255);
        }           
    }

    //*************************************************************************//

    Mask<float> MASK(mask);

    Domain DOM(MASK);

    Image<data_t> IN(width, height, input);
    Image<data_t> OUT(width, height);

    IterationSpace<data_t> IS(OUT);

    BoundaryCondition<data_t> BcAtClamp(IN, MASK, Boundary::CLAMP);

    Accessor<data_t> AccAtClamp(BcAtClamp);

    Bokeh BOKEH(IS, AccAtClamp, DOM, MASK, threshold, amp);
    BOKEH.execute();
    float timing = hipacc_last_kernel_timing();

    d = OUT.data(); 

    for(size_t y = 0; y < height; ++y) { 
        for(size_t x = 0; x < width; ++x) { 
            RGBQUAD color;  
            unpack(color.rgbRed, color.rgbGreen, color.rgbBlue, d[x+y*width]);
            color.rgbReserved = 255; 
            FreeImage_SetPixelColor(img, x, y, &color); 
        } 
    } 
    FreeImage_Save(FIF_PNG, img, "BOKEH.png");
    //*************************************************************************//

    FreeImage_Unload(img);
    delete [] input;

    fprintf(stdout,"<HIPACC:> Overall time: %f(ms)\n", timing);

    return EXIT_SUCCESS;
}

